const projects = [
  {
    id: "pet-finder",
    emoji: "üê∂üê±",
    title: "Pet Finder ‚Äî Matching People with Pets through Data",
    summary:
      "A data-driven web platform that connects adopters with the right pets through intelligent filtering and adoption data analysis.",
    tech: ["Flask", "Python", "Pandas", "HTML", "CSS", "Web Scraping"],
    demo: "https://pet-finder-idta.onrender.com/",
    repo: "https://github.com/cih-lian-liao/pet-finder",
    details: [
      "I created Pet Finder to help adopters find the right pet quickly and easily, while also supporting rescue organizations in placing animals more effectively. The platform enables users to filter animals by location, size, breed, age, and gender, making the adoption process both intuitive and personalized.",
      "On the backend, I used Flask to build the web application and employed Python web scraping to collect real adoption listings. Using Pandas, I analyzed adoption trends and predictors such as breed popularity, age impact, and adoption fee structures. The frontend, built with HTML and CSS, was designed to be clean and user-friendly for adopters.",
      "Pet Finder does more than assist organizations with data management ‚Äî it empowers adopters with insights and gives stray dogs and cats a better chance at finding a loving home.",
      "Highlights:",
      "- Intelligent filtering by location, size, breed, age, and gender",
      "- Backend built with Flask; frontend with HTML/CSS",
      "- Automated data collection via Python web scraping",
      "- Adoption trend analysis using Pandas (patterns & predictors)",
      "- Supports both adopters and rescue organizations with actionable insights",
      "- Strengthened my skills in full-stack development, web scraping, and data analysis",
    ],
  },
  {
    id: "healthbuddy",
    emoji: "ü©∫",
    title:
      "HealthBuddy ‚Äî A personal health CRM that logs daily metrics and visualizes progress with goal tracking",
    summary:
      "A desktop health CRM built with Java Swing and SQLite that records daily metrics (weight, BMI, steps, blood pressure, heart rate) and visualizes trends against goals.",
    tech: ["Java", "Swing", "SQLite", "JDBC", "JFreeChart", "CSV Export"],
    demo: "#",
    repo: "#",
    details: [
      "HealthBuddy is a Java Swing desktop app backed by SQLite. It lets users record weight, BMI, steps, blood pressure, heart rate, and daily habits, then visualize time-series trends with JFreeChart and export data to CSV‚Äîturning raw logs into actionable insights.",
      "I built HealthBuddy to practice end-to-end desktop application design‚Äîfrom UX flow and form validation to data modeling and analytics. Users can enter daily health data, review charts by metric and date range, and compare progress against targets (e.g., target weight).",
      "I architected the app with a clean separation between UI and persistence (SQLite via JDBC), added realistic seeded data for testing, and implemented CSV export to support external analysis and interoperability.",
      "Highlights:",
      "- Daily logging for weight, BMI, steps, blood pressure, heart rate, and habits",
      "- Goal tracking with charts that compare actual progress vs. targets",
      "- Built with Java Swing UI and SQLite storage via JDBC",
      "- Time-series visualization using JFreeChart",
      "- CSV export for analysis in Excel/Python/BI tools",
      "- Clear separation of UI, domain models, and database access; seeded demo data for quick testing",
    ],
  },
  {
    id: "flood-map-alert",
    emoji: "üåä",
    title: "Splash ‚Äî Comprehensive Flood Risk Management Platform",
    summary:
      "A comprehensive flood risk management platform that combines National Weather Service data with community intelligence to deliver real-time flood risk assessments and emergency resources for community safety.",
    tech: [
      "JavaScript ES6+",
      "Leaflet.js",
      "National Weather Service API",
      "HTML5",
      "CSS3",
      "LocalStorage",
    ],
    demo: "https://cih-lian-liao.github.io/splash/",
    repo: "https://github.com/cih-lian-liao/splash",
    details: [
      "Splash is an innovative flood risk management platform designed to provide real-time weather intelligence and community-driven safety insights for emergency preparedness and response. Built as a fully responsive web application, Splash combines official weather data from the National Weather Service with community intelligence to deliver accurate, actionable flood risk assessments.",
      "The platform features a sophisticated mapping interface with real-time flood risk visualization, integrating multiple data sources including weather data, community reports, and proximity analysis algorithms. The system provides color-coded markers indicating safe and dangerous areas with intensity-based visualization, automatic location detection, and real-time updates.",
      "Key modules include an Interactive Flood Risk Mapping System with dynamic risk calculation, Community Intelligence Synthesis using proximity and temporal weighting algorithms, Safe Parking Finder with Google Maps integration and safety scoring, Community Safety Reports with multi-category reporting and real-time filtering, and Emergency Response Center with location-specific contacts and emergency procedures.",
      "Highlights:",
      "- Real-time weather data integration from National Weather Service API with intelligent caching and fallback mechanisms",
      "- Advanced community intelligence synthesis using proximity analysis and temporal weighting algorithms",
      "- Interactive mapping system with Leaflet.js, OpenStreetMap integration, and dynamic risk visualization",
      "- Comprehensive emergency resource directory with location-specific contacts and emergency procedures",
      "- Mobile-first responsive design with cross-platform compatibility and accessibility features",
      "- LocalStorage-based data persistence for user reports, preferences, and emergency kit progress tracking",
      "- Sophisticated data management with input validation, coordinate processing, and efficient state handling",
      "- GitHub Pages deployment with automatic path resolution and seamless production deployment",
    ],
  },
  {
    id: "bali-travel-tours",
    emoji: "üå¥",
    title: "Bali Travel Tours ‚Äî Responsive Tourism Website",
    summary:
      "A modern responsive tourism website concept featuring immersive visuals, interactive navigation, and scroll-based storytelling.",
    tech: ["HTML5", "CSS3", "JavaScript", "Responsive Design", "Animations"],
    demo: "#",
    repo: "#",
    details: [
      "I designed and developed a modern, responsive website for a Bali travel agency concept. The site highlights various travel packages (Regular, Premium, Event), destinations (Ocean, Jungle, Island tours), and seasonal promotions with a strong visual emphasis through full-screen video backgrounds, hover-activated menus, and interactive text animations.",
      "This project focused on delivering an engaging, visually rich experience, tailored to the travel industry, while practicing advanced front-end techniques for layout, animation, and interactivity.",
      "Highlights:",
      "- Immersive Hero Section with looping video background and scrolling text banners",
      "- Interactive navigation with hover-triggered dropdown cards for packages and destinations",
      "- Dynamic tour sections showcasing itineraries, pricing, and booking calls-to-action",
      "- Scroll-based animations (JavaScript-driven parallax) for storytelling",
      "- Responsive design optimized for both desktop and mobile",
      "- Strengthened skills in HTML5, CSS3 (animations, transitions, responsive layouts), and vanilla JavaScript for interactive UI",
    ],
  },
  {
    id: "funzymart",
    emoji: "üß∏",
    title: "FunzyMart ‚Äî A Modern React E-commerce Website",
    summary:
      "A React (Vite) e-commerce prototype simulating a complete online shopping flow with catalog filtering, dynamic product pages, and a Context API-powered cart system.",
    tech: [
      "React",
      "Vite",
      "React Router",
      "Context API",
      "CSS (Flexbox & Grid)",
    ],
    demo: "#",
    repo: "#",
    details: [
      "I built FunzyMart, a modern toy e-commerce website developed with React (Vite), to simulate the full online shopping experience. The platform was designed with a strong focus on user experience and scalable architecture, making it both engaging for customers and maintainable for developers.",
      "On the homepage, users are greeted with a lively hero section and clear call-to-actions that lead them into the catalog. The product catalog supports category filtering, allowing shoppers to browse items such as wooden toys or stuffed animals with ease. Each product links to a dynamic detail page that displays images, specifications, and an ‚ÄúAdd to Cart‚Äù option.",
      "The shopping cart system was implemented using the React Context API, ensuring global state management and real-time updates across the application. A sleek modal-based cart UI lets users adjust quantities, remove items, and see subtotals instantly before proceeding to checkout.",
      "Built with custom CSS layouts (Flexbox and Grid), FunzyMart is fully responsive and optimized for both desktop and mobile users. Its component-based structure ‚Äî including navigation, product cards, breadcrumb navigation, and footer ‚Äî ensures scalability and reusability.",
      "Highlights:",
      "- Lively hero section with clear call-to-actions driving users into the catalog",
      "- Product catalog with category filtering and dynamic detail pages",
      "- Context API-powered shopping cart with modal UI, real-time updates, and subtotal calculations",
      "- Fully responsive design with custom CSS layouts (Flexbox & Grid)",
      "- Component-based structure (navigation, product cards, breadcrumbs, footer) for scalability and maintainability",
      "- Strengthened skills in React state management, routing, reusable component design, and responsive UI development",
    ],
  },
  {
    id: "sneat-dashboard",
    emoji: "üìä",
    title: "Sneat Dashboard Analytics Platform ‚Äî Full-Stack React Application",
    summary:
      "A comprehensive analytics dashboard built with React 18 and Vercel Functions, providing real-time data visualization across Analytics, CRM, and E-commerce modules with responsive design and dark/light mode.",
    tech: [
      "React 18",
      "Vite",
      "React Router",
      "Vercel Functions",
      "MongoDB Atlas",
      "Chart.js",
      "Axios",
    ],
    demo: "https://sneat-cihlianliao.vercel.app/",
    repo: "https://github.com/cih-lian-liao/sneat",
    details: [
      "Sneat is a full-stack analytics dashboard that demonstrates modern web development practices. Built with React 18 and deployed on Vercel, it provides real-time data visualization across multiple business modules including Analytics, CRM, and E-commerce functionality.",
      "The platform features a modular component architecture with 20+ reusable components, responsive design optimized for all devices, and a sophisticated dark/light mode implementation. The backend utilizes Vercel Functions for serverless APIs, MongoDB Atlas for cloud database hosting, and Mongoose for efficient data modeling.",
      "Key technical achievements include achieving a 95+ Lighthouse score, implementing real-time data updates, and creating a scalable architecture that supports multiple business modules. The project showcases full-stack development skills, performance optimization, and modern deployment practices.",
      "Highlights:",
      "- Full-stack architecture with React 18, Vercel Functions, and MongoDB Atlas",
      "- Real-time analytics across Analytics, CRM, and E-commerce modules",
      "- Responsive design with dark/light mode and accessibility features",
      "- Serverless backend with sub-200ms API responses and 99.9% uptime",
      "- Performance optimization with code splitting, lazy loading, and efficient queries",
      "- Modern deployment pipeline with Git-based version control and continuous deployment",
      "- Comprehensive component library with consistent styling and modular design",
      "- Advanced data visualization using Chart.js with interactive charts and metrics",
    ],
  },
  {
    id: "ai-portfolio",
    emoji: "üíª",
    title: "Personal Portfolio Website with AI Chatbot",
    summary:
      "A comprehensive full-stack portfolio website featuring an intelligent AI chatbot (LilyGPT) that provides interactive conversations about my background, skills, and projects. Built with React frontend, Express.js backend, and powered by OpenAI GPT-3.5 Turbo.",
    tech: ["React 19", "Vite", "Express.js", "Node.js", "OpenAI GPT-3.5 Turbo", "OpenRouter API", "Tailwind CSS", "Vercel"],
    demo: "https://cihlianliao-portfolio.vercel.app",
    repo: "https://github.com/cih-lian-liao/portfolio-site",
    details: [
      "I developed a modern, interactive portfolio website that goes beyond traditional static portfolios by integrating an AI-powered chatbot called LilyGPT. This innovative feature allows visitors to have real-time conversations about my professional background, technical skills, projects, and career aspirations.",
      "The full-stack application consists of a React 19 frontend built with Vite for optimal performance, and an Express.js backend that handles API requests and integrates with OpenAI's GPT-3.5 Turbo through OpenRouter. The chatbot provides intelligent, context-aware responses based on my comprehensive professional profile.",
      "Key Features:",
      "- Interactive AI chatbot (LilyGPT) with 6 pre-configured interview-relevant questions",
      "- Comprehensive portfolio sections: About, Skills, Projects, Education, Experience, Beyond Code, Resume, Contact",
      "- Responsive design with mobile-first approach using Tailwind CSS",
      "- Full-stack architecture with React frontend and Express.js backend",
      "- AI integration using OpenAI GPT-3.5 Turbo via OpenRouter API",
      "- Real-time chat interface with message history and loading states",
      "- CORS configuration supporting multiple Vercel domains",
      "- Environment-based configuration for development and production",
      "- Automated deployment pipeline with Vercel",
      "Technical Implementation:",
      "- Frontend: React 19 with Vite for fast development and optimized builds",
      "- Backend: Express.js server with RESTful API endpoints for chat functionality",
      "- AI Integration: OpenAI GPT-3.5 Turbo with comprehensive context about my background",
      "- Styling: Tailwind CSS for responsive, utility-first design",
      "- Deployment: Vercel with automatic GitHub integration and environment variables",
      "- Security: Environment variables for API keys, CORS configuration for cross-origin requests",
      "Impact:",
      "- Provides an innovative way for recruiters and collaborators to interact with my portfolio",
      "- Demonstrates proficiency in full-stack development, AI integration, and modern web technologies",
      "- Showcases problem-solving skills in building interactive user experiences",
      "- Highlights ability to work with APIs, handle real-time data, and implement responsive design",
    ],
  },
];

export default projects;